/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */

import { ITelemetryErrorEvent, ITelemetryGenericEvent, ITelemetryPerformanceEvent, ITelemetryProperties } from "@fluidframework/common-definitions";
import { EphemeralEvent } from "./EphemeralEvent";
import { IRuntimeSignaler } from './EphemeralEventScope';

/**
 * Properties included on all events sent by [[EphemeralTelemetryLogger]].
 */
export interface IEphemeralTelemetryProperties extends ITelemetryProperties {
    /**
     * Optional. ID of the client if it's been assigned by the runtime. 
     */
    clientId?: string;

    /**
     * ID used to correlate multiple events for an operation. Typically of the form of 
     * `${clientId}:${timestamp}` but may include the clientId of the sender when logging
     * that an event was received.
     */
    correlationId: string;

    /**
     * Name of the event being logged.
     */
    eventName: string;

    /**
     * Time that the event occurred. The timestamp is generated by [[EphemeralEvent.getTimestamp]].
     */
    timestamp: string;
}

/**
 * Wraps the configured logger for the runtime and ensures that certain mandatory properties
 * are included on outgoing telemetry events.
 */
export class EphemeralTelemetryLogger {
    private readonly _runtime: IRuntimeSignaler;

    /**
     * Creates a new `EphemeralTelemetryLogger` instance.
     * @param runtime Containers runtime instance. 
     */
    public constructor(runtime: IRuntimeSignaler) {
        this._runtime = runtime;
    }

    /**
     * Sends a generic telemetry event.
     * @param eventName Name of the event to send. 
     * @param error Optional. Error object to send with event. 
     * @param additionalProperties Optional. Additional properties to include with event.
     */
    public sendTelemetryEvent(eventName: string, error?: any, additionalProperties?: Partial<IEphemeralTelemetryProperties>): void {
        if (this._runtime.logger) {
            const evt: ITelemetryGenericEvent = this.createTelemetryEvent(eventName, additionalProperties);
            this._runtime.logger.sendTelemetryEvent(evt, error);
        }
    }

    /**
     * Sends an error event.
     * @param eventName Name of the event to send. 
     * @param error Optional. Error object to send with event. 
     * @param additionalProperties Optional. Additional properties to include with event.
     */
     public sendErrorEvent(eventName: string, error?: any, additionalProperties?: Partial<IEphemeralTelemetryProperties>): void {
        if (this._runtime.logger) {
            const evt: ITelemetryErrorEvent = this.createTelemetryEvent(eventName, additionalProperties);
            this._runtime.logger.sendErrorEvent(evt, error);
        }
    }
    
    /**
     * Sends a performance telemetry event.
     * @param eventName Name of the event to send.
     * @param duration The duration of the event in milliseconds. 
     * @param error Optional. Error object to send with event. 
     * @param additionalProperties Optional. Additional properties to include with event.
     */
     public sendPerformanceEvent(eventName: string, duration: number, error?: any, additionalProperties?: Partial<IEphemeralTelemetryProperties>): void {
        if (this._runtime.logger) {
            const evt: ITelemetryPerformanceEvent = {
                duration: duration,
                ...this.createTelemetryEvent(eventName, additionalProperties)
            };
            this._runtime.logger.sendPerformanceEvent(evt, error);
        }
    }

    private createTelemetryEvent<T extends IEphemeralTelemetryProperties>(eventName: string, additionalProperties?: Partial<IEphemeralTelemetryProperties>): T {
        const now = EphemeralEvent.getTimestamp();
        return {
            eventName: eventName,
            clientId: this._runtime.clientId,
            correlationId: EphemeralTelemetryLogger.formatCorrelationId(this._runtime.clientId, now),
            timestamp: now,
            ...additionalProperties
        } as IEphemeralTelemetryProperties as T;
    }

    public static formatCorrelationId(clientId: string|undefined, timestamp: number): string {
        return `${clientId}:${timestamp}`
    }
}


